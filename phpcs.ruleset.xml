<?xml version="1.0"?>
<ruleset name="Example Project">
	<description>A custom set of rules to check for a WPized WordPress project</description>

	<exclude-pattern>/node_modules/*</exclude-pattern>
	<exclude-pattern>/vendor/*</exclude-pattern>

	<!--
	<rule ref="Squiz.PHP.CommentedOutCode"/>
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>
	<rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>
	<rule ref="Generic.Commenting.Todo"/>
	<rule ref="Generic.ControlStructures.InlineControlStructure"/>

	<rule ref="Generic.ControlStructures.InlineControlStructure" />
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>
	<rule ref="Generic.PHP.DisallowShortOpenTag"/>
	<rule ref="Generic.Files.ByteOrderMark"/>
	<rule ref="Generic.PHP.LowerCaseConstant"/>

	<arg name="tab-width" value="4"/>
	<rule ref="Generic.WhiteSpace.DisallowSpaceIndent"/>
	<rule ref="Generic.WhiteSpace.ScopeIndent">
		<properties>
			<property name="indent" value="4"/>
			<property name="tabIndent" value="true"/>
		</properties>
	</rule>

	<rule ref="Generic.PHP.NoSilencedErrors" />

	<rule ref="Squiz.Strings.DoubleQuoteUsage"/>
	<rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar">
		<severity>0</severity>
	</rule>

	<rule ref="Generic.Files.LineEndings">
		<properties>
			<property name="eolChar" value="\n"/>
		</properties>
	</rule>

	<rule ref="PEAR.Functions.FunctionCallSignature">
		<properties>
			<property name="requiredSpacesAfterOpen" value="1" />
			<property name="requiredSpacesBeforeClose" value="1" />
		</properties>
	</rule>
	<rule ref="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket">
		<severity>0</severity>
	</rule>
	<rule ref="PEAR.Functions.FunctionCallSignature.CloseBracketLine">
		<severity>0</severity>
	</rule>

	<rule ref="WordPress.Arrays.ArrayDeclaration"/>
	<rule ref="WordPress.Arrays.ArrayKeySpacingRestrictions"/>
	<rule ref="WordPress.Classes.ValidClassName"/>
	<rule ref="WordPress.Files.FileName"/>
	<rule ref="WordPress.Functions.FunctionDeclarationArgumentSpacing"/>
	<rule ref="WordPress.NamingConventions.ValidFunctionName"/>
	<rule ref="WordPress.WhiteSpace.ControlStructureSpacing"/>
	<rule ref="WordPress.WhiteSpace.OperatorSpacing"/>
	<rule ref="WordPress.WhiteSpace.CastStructureSpacing"/>
	<rule ref="WordPress.PHP.YodaConditions"/>

	<rule ref="WordPress.XSS.EscapeOutput"/>
	<rule ref="WordPress.PHP.DiscouragedFunctions"/>
	<rule ref="WordPress.WP.EnqueuedResources"/>
	<rule ref="WordPress.Variables.GlobalVariables"/>

	<rule ref="WordPress-Core"/>
	<rule ref="WordPress.Arrays.ArrayAssignmentRestrictions"/>
	<rule ref="WordPress.Functions.FunctionRestrictions"/>
	<rule ref="WordPress.Variables.VariableRestrictions"/>
	<rule ref="WordPress.VIP"/>
	<rule ref="WordPress.XSS.EscapeOutput"/>
	-->

	<!--
		We may also want to to include all the rules in a standard
	-->
	<rule ref="WordPress-Core">
	<rule ref="WordPress-Extra">
	<rule ref="WordPress-VIP">

	<!--
		We may want a middle ground though. The best way to do this is add the
		entire ruleset, then rule by rule, remove ones that don't suit a project. We
		can do this by running `phpcs` with the '-s' flag, to see the names of the
		different Sniffs, as their rules are broken. From here, we can opt to
		exclude problematic sniffs like so.
	-->
	<exclude name="WordPress.XSS.EscapeOutput"/>

</ruleset>
